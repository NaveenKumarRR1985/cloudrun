version: '3.8'

services:
  # Flask Application
  flask-app:
    build: ./app
    ports:
      - "8080:8080"
    environment:
      # OpenTelemetry Configuration - Send to OTel Collector
      - OTEL_SERVICE_NAME=flask-app
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=flask-app,service.version=1.0.0,deployment.environment=local
      # Send to OpenTelemetry Collector instead of directly to Jaeger
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=http/protobuf
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_PYTHON_LOG_CORRELATION=true
      - OTEL_PYTHON_LOG_LEVEL=info
      # Flask Configuration
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - ./app:/app
    depends_on:
      - otel-collector
    networks:
      - observability

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
      - "8888:8888"   # Collector metrics
    depends_on:
      - jaeger-collector
      - prometheus
    networks:
      - observability

  # Jaeger Collector - receives traces from OTel Collector
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.50
    ports:
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "9411:9411"    # Zipkin compatible endpoint
    environment:
      - SPAN_STORAGE_TYPE=memory
    command: [
      "--collector.otlp.enabled=true",
      "--collector.otlp.grpc.host-port=0.0.0.0:4317",
      "--collector.otlp.http.host-port=0.0.0.0:4318"
    ]
    networks:
      - observability

  # Jaeger Query - serves the UI and API for retrieving traces
  jaeger-query:
    image: jaegertracing/jaeger-query:1.50
    ports:
      - "16686:16686"  # Jaeger UI
      - "16687:16687"  # Admin port
    environment:
      - SPAN_STORAGE_TYPE=memory
    depends_on:
      - jaeger-collector
    networks:
      - observability

  # Prometheus - Metrics Storage
  prometheus:
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

    networks:
      - observability

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.1.5
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - observability

networks:
  observability:
    driver: bridge